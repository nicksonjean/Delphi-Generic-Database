      {$IFDEF dbExpressLib}
      with TConnection.FInstance.FSQLInstance do
      begin
        case FDriver of
          SQLITE:
            begin
              ConnectionName := 'DBSQLite';
              DriverName := 'SQLite';
              KeepConnection := True;
              LoginPrompt := False;
              Params.BeginUpdate();
              Params.Clear();
              Params.Values['ColumnMetadataSupported'] := 'False';
              Params.Values['LoginPrompt'] := 'False';
              Params.Values['ForceCreateDatabase'] := 'False';
              Params.Values['FailIfMissing'] := 'False';
              Params.Values['Database'] := FDatabase;
              Params.EndUpdate();
              ParamsLoaded := True;
            end;
          MYSQL:
            begin
              ConnectionName := 'DBMySQL';
              DriverName := 'MySQL';
              KeepConnection := True;
              LoginPrompt := False;
              GetDriverFunc := 'getSQLDriverMYSQL';
              LibraryName := 'dbxmys.dll';
              VendorLib := 'LIBMYSQL.dll';
              Params.BeginUpdate();
              Params.Clear();
              Params.Values['ColumnMetadataSupported'] := 'False';
              Params.Values['LoginPrompt'] := 'False';
              Params.Values['HostName'] := FHost;
              Params.Values['Port'] := IntToStr(IfThen(FPort = 3306, 3306, FPort));
              Params.Values['Database'] := FDatabase;
              Params.Values['User_Name'] := FUsername;
              Params.Values['Password'] := System.StrUtils.IfThen(FPassword = '', #0, FPassword);
              Params.Values['ForceCreateDatabase'] := 'False';
              Params.Values['FailIfMissing'] := 'False';
              Params.Values['MaxBlobSize'] := '-1';
              Params.Values['BlobSize'] := '-1';
              Params.Values['LocaleCode'] := '0000';
              Params.Values['Compressed'] := 'True';
              Params.Values['Encrypted'] := 'False';
              Params.EndUpdate();
              ParamsLoaded := True;
            end;
          FIREBIRD:
            begin
              ConnectionName := 'DBFirebird';
              DriverName := 'Firebird';
              KeepConnection := True;
              LoginPrompt := False;
              GetDriverFunc := 'getSQLDriverFIREBIRD';
              LibraryName := 'dbxfb.dll';
              VendorLib := 'fbclient.dll';
              Params.BeginUpdate();
              Params.Clear();
              Params.Values['ColumnMetadataSupported'] := 'False';
              Params.Values['LoginPrompt'] := 'False';
              if ( (FHost = 'localhost') or (FHost = '127.0.0.1') ) then
                Params.Values['Database'] := FDatabase
              else
                Params.Values['Database'] := FHost + ':' + FDatabase;
              Params.Values['Port'] := IntToStr(IfThen(FPort = 3050, 3050, FPort));
              Params.Values['User_Name'] := FUsername;
              Params.Values['Password'] := System.StrUtils.IfThen(FPassword = '', #0, FPassword);
              Params.Values['Role'] := 'RoleName';
              Params.Values['LocaleCode'] := '0000';
              Params.Values['IsolationLevel'] := 'ReadCommitted';
              Params.Values['ServerCharSet'] := 'ISO8859_1';
              Params.Values['SQLDialect'] := '3';
              Params.Values['BlobSize'] := '-1';
              Params.Values['CommitRetain'] := 'False';
              Params.Values['WaitOnLocks'] := 'True';
              Params.Values['TrimChar'] := 'False';
              Params.Values['RoleName'] := 'RoleName';
            end;
          INTERBASE:
            begin
              ConnectionName := 'DBInterbase';
              DriverName := 'InterBase';
              KeepConnection := True;
              LoginPrompt := False;
              GetDriverFunc := 'getSQLDriverINTERBASE';
              LibraryName := 'dbxint.dll';
              VendorLib := 'GDS32.DLL';
              Params.BeginUpdate();
              Params.Clear();
              Params.Values['ColumnMetadataSupported'] := 'False';
              Params.Values['LoginPrompt'] := 'False';
              if FHost = 'localhost' then
                Params.Values['Database'] := FDatabase
              else
                Params.Values['Database'] := FHost + ':' + FDatabase;
              Params.Values['Port'] := IntToStr(IfThen(FPort = 3050, 3050, FPort));
              Params.Values['User_Name'] := FUsername;
              Params.Values['Password'] := System.StrUtils.IfThen(FPassword = '', #0, FPassword);
              Params.Values['Role'] := 'RoleName';
              Params.Values['LocaleCode'] := '0000';
              Params.Values['IsolationLevel'] := 'ReadCommitted';
              Params.Values['ServerCharSet'] := 'ISO8859_1';
              Params.Values['SQLDialect'] := '3';
              Params.Values['BlobSize'] := '-1';
              Params.Values['CommitRetain'] := 'False';
              Params.Values['WaitOnLocks'] := 'True';
              Params.Values['TrimChar'] := 'False';
              Params.Values['RoleName'] := 'RoleName';
            end;
          MSSQL:
            begin
              ConnectionName := 'DBMSSQL';
              DriverName := 'MSSQL';
              KeepConnection := False;
              LoginPrompt := False;
              GetDriverFunc := 'getSQLDriverMSSQL';
              VendorLib := 'sqlncli11.dll';
              LibraryName := 'dbxmss.dll';
              Params.BeginUpdate();
              Params.Clear();
              Params.Values['ColumnMetadataSupported'] := 'False';
              Params.Values['LoginPrompt'] := 'False';
              Params.Values['HostName'] := FHost;
              Params.Values['Port'] := IntToStr(IfThen(FPort = 1433, 1433, FPort));
              Params.Values['Database'] := FDatabase;
              Params.Values['User_Name'] := FUsername;
              Params.Values['Password'] := System.StrUtils.IfThen(FPassword = '', #0, FPassword);
              Params.Values['ForceCreateDatabase'] := 'False';
              Params.Values['FailIfMissing'] := 'False';
              Params.Values['MaxBlobSize'] := '-1';
              Params.Values['BlobSize'] := '-1';
              Params.Values['LocaleCode'] := '0000';
              Params.Values['Compressed'] := 'True';
              Params.Values['Encrypted'] := 'False';
              Params.Values['Max_DBProcesses'] := '50';
              Params.Values['SchemaOverride'] := '%.dbo';
              Params.EndUpdate();
              ParamsLoaded := True;
            end;
          POSTGRESQL:
            begin
              ConnectionName := 'DBDevartPostgreSQL';
              DriverName := 'DevartPostgreSQL';
              KeepConnection := False;
              LoginPrompt := False;
              GetDriverFunc := 'getSQLDriverPostgreSQL';
              LibraryName := 'dbexppgsql40.dll';
              VendorLib := 'dbexppgsql40.dll';
              Params.BeginUpdate();
              Params.Clear();
              Params.Values['LoginPrompt'] := 'False';
              Params.Values['HostName'] := FHost;
              Params.Values['Port'] := IntToStr(IfThen(FPort = 5432, 5432, FPort));
              Params.Values['Database'] := FDatabase;
              Params.Values['SchemaName'] := FSchema;
              Params.Values['User_Name'] := FUsername;
              Params.Values['Password'] := System.StrUtils.IfThen(FPassword = '', #0, FPassword);
              Params.Values['SchemaName'] := FSchema;
              Params.EndUpdate();
              ParamsLoaded := True;
            end;
          ORACLE:
            begin
              ConnectionName := 'DBOracle';
              DriverName := 'Oracle';
              KeepConnection := False;
              LoginPrompt := False;
              GetDriverFunc := 'getSQLDriverORACLE';
              VendorLib := 'oci.dll';
              LibraryName := 'dbexpora.dll';
              Params.BeginUpdate();
              Params.Clear();
              Params.Values['ColumnMetadataSupported'] := 'False';
              Params.Values['LoginPrompt'] := 'False';
              Params.Values['HostName'] := FHost;
              Params.Values['Port'] := IntToStr(IfThen(FPort = 1521, 1521, FPort));
              Params.Values['Database'] := FDatabase;
              Params.Values['User_Name'] := FUsername;
              Params.Values['Password'] := System.StrUtils.IfThen(FPassword = '', #0, FPassword);
              Params.Values['Port'] := IntToStr(FPort);
              Params.Values['BlobSize'] := '1';
              Params.Values['LocaleCode'] := '0000';
              Params.Values['OS Authentification'] := 'False';
              Params.Values['Multiple Transaction'] := 'False';
              Params.Values['Trim Char'] := 'False';
              Params.Values['Oracle TransIsolation'] := 'ReadCommited';
              Params.EndUpdate();
              ParamsLoaded := True;
            end;
        end;
      end;
      {$ENDIF}